package com.apps.controller;import com.apps.entity.RoleDao;import com.apps.service.RoleService;import com.apps.util.DateUtility;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.propertyeditors.CustomDateEditor;import org.springframework.web.bind.ServletRequestDataBinder;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.InitBinder;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.PutMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import java.util.TimeZone;/** * 角色 * * @author SimonYang * @version 1.0.0 * @date 2019-03-18 */@RestController@RequestMapping(value = "/api/auth")public class RoleController {    private final RoleService service;    private final RoleDao dao;    /**     * Instantiates a new Auth controller.     *     * @param service     *         the service     * @param dao     *         the dao     */    @Autowired    public RoleController(RoleService service, RoleDao dao) {        this.service = service;        this.dao = dao;    }    /**     * Init.     *     * @param request     *         the request     * @param binder     *         the binder     */    @InitBinder    protected void init(HttpServletRequest request, ServletRequestDataBinder binder) {        /*TimeZone時區，解決差8小時的問題*/        SimpleDateFormat dateFormat = new SimpleDateFormat(DateUtility.FORMAT_DATETIME);        dateFormat.setTimeZone(TimeZone.getTimeZone(DateUtility.UTC));        binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));    }    /**     * Gets user list.     *     * @return the user list     */    @GetMapping(value = "/getRoleList")    public List<RoleDao> getRoleList() {        return service.findAllList();    }    /**     * Gets user info by name.     *     * @param authority     *         the String     * @return the Role info by authority     */    @GetMapping(value = "/getRole")    public RoleDao getUserInfoByName(@RequestParam("authority") String authority) {        return service.findByAuthority(authority).orElse(null);    }    /**     * Add auth auth dao.     *     * @param dao     *         the dao     * @return the role dao     */    @PutMapping(value = "/addRole")    public RoleDao addRole(RoleDao dao) {        return service.save(dao, "TEST", "127.0.0.1").orElse(null);    }    /**     * Update user auth dao.     *     * @param dao     *         the dao     * @return the auth dao     */    @PostMapping(value = "/updateRole")    public RoleDao updateRole(RoleDao dao) {        return service.save(dao, "TEST", "127.0.0.1").orElse(null);    }    /**     * Enable user role dao.     *     * @param dao     *         the dao     * @return the role dao     */    @PostMapping(value = "/enableRole")    public RoleDao enableRole(RoleDao dao) {        return service.enable(dao.getId(), "TEST", "127.0.0.1").orElse(null);    }    /**     * Remove user auth dao.     *     * @param dao     *         the dao     * @return the role dao     */    @PostMapping(value = "/removeAuth")    public RoleDao removeRole(RoleDao dao) {        return service.remove(dao.getId(), "TEST", "127.0.0.1").orElse(null);    }    /**     * Delete role info.     *     * @param id     *         the id     */    @PostMapping(value = "/deleteRole")    public void deleteRole(@RequestParam("id") String id) {        service.delete(id);    }}